from typing import Callable, Dict

import click
import random


@click.group()
def cli():
    pass


@cli.command()
@click.option("--delivery", default=False, is_flag=True)
@click.option("--pick", default=False, is_flag=True)
@click.argument("pizza", nargs=1)
def order(pizza: str, delivery: bool, pick: bool) -> None:
    """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–∞–ø—ã –∂–∏–∑–Ω–∏ –ø–∏—Ü—Ü—ã"""
    click.echo(bake(pizza))
    if delivery:
        click.echo(deliver(pizza))
    elif pick:
        click.echo(pickup(pizza))


@cli.command()
def menu() -> None:
    """ –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é """
    print(f"- Margherita üßÄ : " f"{str(Margherita(True))}")
    print(f"- Pepperoni üçï : {str(Pepperoni(True))}")
    print(f"- Hawaiian üçç : {str(Hawaiian(True))}")


def log(tag: str) -> Callable:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    –í—ã–≤–æ–¥–∏—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """

    def wrapper(func: Callable) -> Callable:
        def inner_wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            return tag.format(func.__name__, result)

        return inner_wrapper

    return wrapper


@log("üë®‚Äçüç≥ {} - –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} —Å")
def bake(pizza) -> int:
    """ –ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É """
    count = random.randint(1, 15)
    return count


@log("üöö {} - –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} —Å")
def deliver(pizza) -> int:
    """ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã """
    count = random.randint(5, 30)
    return count


@log("üè† {} - –∑–∞–±—Ä–∞–ª–∏ –∑–∞ {} —Å")
def pickup(pizza) -> int:
    """ –°–∞–º–æ–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã """
    count = random.randint(8, 60)
    return count


class BasePizza:
    """ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∏—Ü—Ü """

    def __init__(self, is_large):
        self.is_large = is_large
        self.dict_ingredients = {"tomato_sauce": 40, "mozzarella": 150}

    def dicts(self) -> Dict:
        """ –í—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∏—Ü—Ü"""
        return self.dict_ingredients

    def __eq__(self, other) -> bool:
        """ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∏—Ü—Ü """

        return (self.is_large == other.is_large) & (self.dicts() == other.dicts())

    def __str__(self) -> str:
        output = ", ".join(
            [key + ": " + str(value) for key, value in self.dict_ingredients.items()]
        )
        return output


class Margherita(BasePizza):
    """ –†–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã –ú–∞—Ä–≥–∞—Ä–∏—Ç—ã """

    def __init__(self, is_large):
        super().__init__(is_large)
        self.dict_ingredients["tomato_sauce"] = 60
        self.dict_ingredients["tomatoes"] = 50


class Pepperoni(BasePizza):
    """ –†–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ """

    def __init__(self, is_large):
        super().__init__(is_large)
        self.dict_ingredients["pepperoni"] = 170


class Hawaiian(BasePizza):
    """ –†–µ—Ü–µ–ø—Ç –ì–∞–≤–∞–π—Å–∫–æ–π –ø–∏—Ü—Ü—ã """

    def __init__(self, is_large):
        super().__init__(is_large)
        self.dict_ingredients["chicken"] = 100
        self.dict_ingredients["pineapples"] = 90


if __name__ == "__main__":
    cli()
