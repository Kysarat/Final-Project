import pytest
from click.testing import CliRunner
from unittest.mock import patch
from exam import *
import random


def test_dicts():
    """ –¢–µ—Å—Ç –Ω–∞ –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è """
    excepted = {"tomato_sauce": 60, "mozzarella": 150, "tomatoes": 50}
    assert Margherita(True).dicts() == excepted


@pytest.mark.parametrize(
    "test_input, exp",
    [
        (Pepperoni(False) == Pepperoni(True), False),
        (Pepperoni(True) == Pepperoni(True), True),
        (Pepperoni(True) == Margherita(True), False),
    ],
)
def test_eq(test_input, exp):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–≤—É—Ö –ø–∏—Ü—Ü
    """
    assert test_input == exp


def test_str():
    """ –¢–µ—Å—Ç –Ω–∞ –≤—ã–≤–æ–¥ str"""
    excepted = "tomato_sauce: 60, mozzarella: 150, tomatoes: 50"
    assert str(Margherita(True)) == excepted


def test_menu():
    """ –¢–µ—Å—Ç –º–µ–Ω—é """
    runner = CliRunner()
    result = runner.invoke(menu)
    actual = result.output
    assert (
        "- Margherita" in actual and "- Hawaiian" in actual and "- Pepperoni" in actual
    )


def test_bake():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–æ—Ç–æ–≤–∫–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º """
    count = random.randint(1, 15)
    with patch.object(random, "randint", return_value=count):
        exp = f"üë®‚Äçüç≥ bake - –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {count} —Å"
        assert bake("Margherita") == exp


def test_pickup():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º """
    count = random.randint(8, 60)
    with patch.object(random, "randint", return_value=count):
        exp = f"üè† pickup - –∑–∞–±—Ä–∞–ª–∏ –∑–∞ {count} —Å"
        assert pickup("Margherita") == exp


def test_deliver():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º """
    count = random.randint(8, 60)
    with patch.object(random, "randint", return_value=count):
        exp = f"üöö deliver - –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {count} —Å"
        assert deliver("Margherita") == exp
